{"version":3,"sources":["server.js","App.js","serviceWorker.js","index.js"],"names":["Url","url","registerServer","data","a","async","console","log","axios","post","res","loginServer","status","token","headers","auth","store","set","allUsersServer","get","App","props","state","username","password","users","handlerChange","bind","register","login","allUsers","k","e","this","setState","target","value","JSON","stringify","className","onChange","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qbAIMA,E,MAAeC,IAEfC,EAAiB,SAAOC,GAAP,eAAAC,EAAAC,OAAA,uDACrBC,QAAQC,IAAIP,GADS,WAAAI,EAAA,MAELI,IAAMC,KAAN,UAAeT,EAAf,cAAgCG,IAF3B,cAEjBO,EAFiB,OAGrBJ,QAAQC,IAAIG,GAHS,kBAIdA,EAAIP,MAJU,sCAOjBQ,EAAc,SAAOR,GAAP,iBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACFI,IAAMC,KAAN,UAAeT,EAAf,WAA6BG,IAD3B,UAEA,MADdO,EADc,QAEVE,OAFU,uBAGZC,EAAQH,EAAII,QAAQC,OACbC,IAAMC,IAAI,eAAgBJ,GAJrB,kBAKTH,EAAIP,MALK,sCAUde,EAAiB,gCAAAd,EAAAC,OAAA,uDAEjBQ,EAAQG,IAAMG,IAAI,gBAClBL,EAAU,CACZC,KAAMF,GAJa,WAAAT,EAAA,MAMLI,IAAMW,IAAN,UAAanB,EAAb,eAA+B,CAACc,aAN3B,UAOF,OADfJ,EANiB,QAObE,OAPa,uBAQfC,EAAQH,EAAII,QAAQC,OACbC,IAAMC,IAAI,eAAgBJ,GATlB,kBAUZH,EAAIP,MAVQ,sCC8DRiB,E,YA5Eb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPtB,KAAK,IAKP,EAAKuB,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBACb,EAAKG,SAAW,EAAKA,SAASH,KAAd,gBAfE,E,2EAkBLI,EAAGC,GAChBC,KAAKC,SAAL,eACGH,EAAIC,EAAEG,OAAOC,U,kHAKZjC,EAAO,CACToB,SAAUU,KAAKX,MAAMC,SACrBC,SAAUS,KAAKX,MAAME,U,mBAEPtB,EAAeC,I,OAA3BO,E,OACJJ,QAAQC,WAAWG,GACjBuB,KAAKC,SAAS,CACd/B,KAAMkC,KAAKC,UAAU5B,K,gKAKnBP,EAAO,CACToB,SAAUU,KAAKX,MAAMC,SACrBC,SAAUS,KAAKX,MAAME,U,mBAEPb,EAAYR,I,OAAxBO,E,OACJuB,KAAKC,SAAS,CACZ/B,KAAMkC,KAAKC,UAAU5B,K,oLAKPQ,K,OAAZR,E,OACNuB,KAAKC,SAAS,CACV/B,KAAMkC,KAAKC,UAAU5B,K,gFAIf,IAAD,OACP,OACE,yBAAK6B,UAAU,OACb,6BACE,2BAAOC,SAAU,SAACR,GAAO,EAAKN,cAAc,WAAYM,IAAKS,YAAY,cAE3E,6BACE,2BAAOD,SAAU,SAACR,GAAO,EAAKN,cAAc,WAAYM,IAAKS,YAAY,cAE3E,6BACE,4BAAQC,QAAST,KAAKL,UAAtB,YACA,4BAAQc,QAAST,KAAKJ,OAAtB,UAEF,6BACE,4BAAQa,QAAST,KAAKH,UAAtB,cAEF,oCAAUG,KAAKX,MAAMnB,W,GAvEXwC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bd71ccea.chunk.js","sourcesContent":["import axios from 'axios';\nimport store from 'store';   //用于本地存储token\nimport settings from './ect/settings'\n\nconst Url = settings.url;\n\nconst registerServer = async (data) => {\n  console.log(Url)\n  let res = await axios.post (`${Url}/register/`, data);\n  console.log(res);\n  return res.data;\n}\n\nconst loginServer = async (data) => {\n  let res = await axios.post (`${Url}/login/`, data);\n  if (res.status == 200) {\n    let token = res.headers.auth;\n    if (token) store.set('django_token', token);\n    return res.data;\n  }\n\n}\n\nconst allUsersServer = async () => {\n   //从本地缓存获取token添加到headers\n  let token = store.get('django_token');\n  let headers = {\n    auth: token\n  }\n  let res = await axios.get(`${Url}/all_users/`, {headers});\n  if (res.status === 200) {\n    let token = res.headers.auth;\n    if (token) store.set('django_token', token);    //刷新本地存储的token\n    return res.data;\n  }\n}\n\nexport {\n  registerServer,\n  loginServer,\n  allUsersServer\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  registerServer,\n  loginServer,\n  allUsersServer\n} from './server';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\",\n      users: [],\n      data:\"\",\n    }\n\n\n\n    this.handlerChange = this.handlerChange.bind(this);\n    this.register = this.register.bind(this);\n    this.login = this.login.bind(this);\n    this.allUsers = this.allUsers.bind(this);\n  }\n\n  handlerChange (k, e) {\n    this.setState({\n      [k]: e.target.value\n    });\n  }\n\n  async register () {\n    let data = {\n      username: this.state.username,\n      password: this.state.password\n    }\n    let res = await registerServer(data);\n    console.log(typeof(res));\n      this.setState({\n      data :JSON.stringify(res)\n    })\n  }\n\n  async login () {\n    let data = {\n      username: this.state.username,\n      password: this.state.password\n    }\n    let res = await loginServer(data);\n    this.setState({\n      data :JSON.stringify(res)\n    })\n  }\n\n  async allUsers () {\n    let res = await allUsersServer();\n  this.setState({\n      data :JSON.stringify(res)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <input onChange={(e) => {this.handlerChange('username', e)}} placeholder=\"username\" />\n        </div>\n        <div>\n          <input onChange={(e) => {this.handlerChange('password', e)}} placeholder=\"password\" />\n        </div>\n        <div>\n          <button onClick={this.register}>register</button>\n          <button onClick={this.login}>login</button>\n        </div>\n        <div>\n          <button onClick={this.allUsers}>all users</button>\n        </div>\n        <h1>data:{this.state.data}</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}